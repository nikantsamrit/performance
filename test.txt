props.put("JSESSIONID", vars.get("sessionCookie"))

ctx.getThread().getCookieManager().clear()

cat /proc/meminfo | awk 'NR==1,NR==3 {print $1,$2/1024/1024 " GB"}'
JVM_ARGS="-Xmx16g -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:ParallelGCThreads=4" jmeter -g results.jtl -o report

# Windows (save as .bat)
findstr /V /G:"keywords_to_remove.txt" "input.txt" > "output.txt"

Capture any value after comma
,\s*\K[^,]+
(?:^|,)\s*\K[^,\r\n]+
^[^,]*,([^,]+)

stage('Map Network Drive') {
            // Map network drive using net use command
            bat """
                net use ${networkDriveLetter} ${networkDrive} /user:${username} ${password}
            """
        }
 
        stage('Push Files to Network Drive') {
            // Use copy command to push files to network drive
            bat """
                xcopy /E /I /Y ${sourceDirectory}\\* ${networkDriveLetter}\\
            """

bat " xcopy /E /I /Y" + "${sourceDirectory}\\*" +  "${networkDriveLetter}\\"
        }
    ${__CSVRead(products.csv, 0, ${__Random(1, 10)})}  
${__groovy(vars.get('myVar'))}



import javax.swing.JOptionPane
import org.apache.jorphan.exec.KeyToolUtils

// Prompt the user for confirmation
int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to run the test?", "Confirmation", JOptionPane.YES_NO_OPTION)

if (response != JOptionPane.YES_OPTION) {
    // Stop the test if the user selects "No"
    log.info("Test execution cancelled by the user.")
    KeyToolUtils.stopEngineNow() // Stop the test immediately
}


******
import javax.swing.JOptionPane

// Display a confirmation dialog
int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to run the test?", "Confirmation", JOptionPane.YES_NO_OPTION)

// Check the user's response
if (response == JOptionPane.YES_OPTION) {
    // User clicked "Yes" - continue with the test
    log.info("User confirmed - proceeding with the test.")
} else {
    // User clicked "No" - stop the test
    log.info("User canceled - stopping the test.")
    SampleResult.setStopTest(true) // Stop the test
}

****
import javax.swing.JOptionPane

// Display a confirmation dialog
int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to run the test?", "Confirmation", JOptionPane.YES_NO_OPTION)

// Check the user's response
if (response == JOptionPane.YES_OPTION) {
    // User clicked "Yes" - continue with the test
    log.info("User confirmed - proceeding with the test.")
} else {
    // User clicked "No" - stop the test
    log.info("User canceled - stopping the test.")
    prev.setStopTest(true) // Stop the test
}

*****
import javax.swing.JOptionPane
import javax.swing.SwingUtilities
import org.apache.jmeter.threads.JMeterContextService

log.info("JSR223 PreProcessor is running...") // Debugging line

// Use SwingUtilities to ensure the dialog runs on the EDT
SwingUtilities.invokeAndWait(new Runnable() {
    void run() {
        // Show confirmation dialog
        int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to run the test?", "Confirm", JOptionPane.YES_NO_OPTION)

        log.info("User response: " + response) // Debugging line

        // Cancel test execution if the user clicks "No"
        if (response != JOptionPane.YES_OPTION) {
            log.error("Test execution cancelled by user.") // Debugging line
            JMeterContextService.getContext().getEngine().stopTest(true) // Stop all threads
            throw new Exception("Test execution cancelled by user.")
        }
    }
})



import java.util.Date

// Get the current time
def now = new Date()

// Define the target time (7 PM)
def targetTime = new Date(now.year, now.month, now.date, 19, 0, 0) // 19:00 = 7 PM

// Check if the current time is before 7 PM
if (now.before(targetTime)) {
    log.info("Current time is before 7 PM. Stopping the test.")
    ctx.getEngine().stopTest(true) // Stop the test gracefully
} else {
    log.info("Current time is 7 PM or later. Proceeding with the test.")
}


import java.time.*
import java.time.format.DateTimeFormatter

// Define the CST timezone
def cstZone = ZoneId.of("America/Chicago")

// Get the current time in CST
def now = ZonedDateTime.now(cstZone)

// Define the target time (7 PM CST)
def targetTime = now.withHour(19).withMinute(0).withSecond(0).withNano(0) // 19:00 = 7 PM

// Check if the current time is before 7 PM CST
if (now.isBefore(targetTime)) {
    log.info("Current time is before 7 PM CST. Stopping the test.")
    ctx.getEngine().stopTest(true) // Stop the test gracefully
} else {
    log.info("Current time is 7 PM CST or later. Proceeding with the test.")
}
*******

import java.time.*
import java.time.format.DateTimeFormatter

// Define the CST timezone
def cstZone = ZoneId.of("America/Chicago")

// Get the current time in CST
def now = ZonedDateTime.now(cstZone)

// Define the start and end times (7 PM CST and 11 PM CST)
def startTime = now.withHour(19).withMinute(0).withSecond(0).withNano(0) // 7 PM CST
def endTime = now.withHour(23).withMinute(0).withSecond(0).withNano(0)   // 11 PM CST

// Check if the current time is outside the range (7 PM CST - 11 PM CST)
if (now.isBefore(startTime) || now.isAfter(endTime)) {
    log.info("Current time is outside the range 7 PM CST - 11 PM CST. Stopping the test.")
    ctx.getEngine().stopTest(true) // Stop the test gracefully
} else {
    log.info("Current time is within the range 7 PM CST - 11 PM CST. Proceeding with the test.")
}


********
def env = vars.get("env")
if (env == "dev") {
    vars.put("base_url", "https://dev.example.com")
} else if (env == "staging") {
    vars.put("base_url", "https://staging.example.com")
} else if (env == "production") {
    vars.put("base_url", "https://example.com")
}

*********
// Define the allowed environments
def allowedEnvironments = ["dev", "UAT", "PPD", "Prod"]

// Get the value of the 'env' variable
def env = vars.get("env")

// Check if 'env' is null or not in the allowed list
if (env == null || !allowedEnvironments.contains(env)) {
    // Fail the test
    SampleResult.setSuccessful(false)
    SampleResult.setResponseMessage("Test failed: 'env' is null or not one of the allowed values (dev, UAT, PPD, Prod). Value provided: " + env)
} else {
    // Continue the test
    SampleResult.setSuccessful(true)
    SampleResult.setResponseMessage("Test passed: 'env' is valid. Value provided: " + env)
}




// Get the directory of the JMX file
String jmxFilePath = ctx.getProperty("jmeter.save.saveservice.base_directory");
if (jmxFilePath == null || jmxFilePath.isEmpty()) {
    jmxFilePath = System.getProperty("user.dir"); // Fallback to current working directory
}

// Define the file name and path
String fileName = "output.txt";
String filePath = jmxFilePath + File.separator + fileName;

// Create the file and write some content
try {
    File file = new File(filePath);
    FileWriter writer = new FileWriter(file);
    writer.write("This is a sample file created by BeanShell Listener.\n");
    writer.write("JMX file location: " + jmxFilePath + "\n");
    writer.close();
    log.info("File created successfully at: " + filePath);
} catch (IOException e) {
    log.error("Failed to create file: " + e.getMessage());
}

${__time(yyyy-MM-dd-HH.mm.ss.SSSSSS,)}
